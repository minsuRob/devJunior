let card = { suit: "하트", rank: "A" }; // {...} 부분이 '객체 리터럴'.  suit : "하트" 와 rank : "A" 에서 suit : "하트", rank : "A" 가 각각 '프로퍼티' 라고 함. suit 랑 rank가 '프로퍼티 이름', 하트 랑 A 가 '프로퍼티 값'
let card = {
  suit: "하트",
  rank: "A",
}; //이처럼 프로퍼티 이름에는 모든 식별자와 문자열 리터럴을 사용 가능. 프로퍼티 값은 모든 데이터 타임의 값과 표현식을 대입할 수 있음

/* 변수에 대입된 객체 안의 프로퍼티 값을 읽거나 쓸 때는 마침표(.) 연산자 또는 대괄호 연산자를 사용 */
card.suit; // -> 하트 를 출력
card["rank"]; // -> A 를 출력

card.value = 14; //없는 프로퍼티 이름에 값을 대입하면 새로운 프로퍼티가 추가됨.
console.log(card);

delete card.rank; //delete 연산자를 사용하면 프로퍼티를 삭제 가능
console.log(card);

console.log("suit" in card); //in 연산자를 사용하면 객체에 특정 프로퍼티가 있는지 확인할 수 있음

/* 생성된 객체는 메모리의 영역을 차지하는 한 덩어리가 된다. 객체 타입의 값을 변수에 대입하면 그 변수에는 객체의 참조가 저장된다. 이때의 변수 상태를 가리켜 그 객체를 참조하고 있다라고 함.
변수 card에 트럼프 카드 객체의 참조가 저장되어 있음을 표현한 것. */
let a = card; //변수에 저장된 객체의 참조는 다른 원시 값과 마찬가지로 다른 변수에 저장할 수 있다. 그러면 변수 a가 card 객체를 참조하게 되므로 a로 card 객체를 읽거나 수정 가능
console.log(a.suit); // -> 하트 를 출력
a.suit = "스페이드"; // suit 라는 프로퍼티 이름에 대한 프로퍼티 값을 스페이드로 대입
console.log(a.suit); // -> 스페이드 출력
console.log(card.suit); // 변수 card와 a가 같은 객체를 참조하기 때문에 위의 문장에서 함께 변경됨. 스페이드 출력
